//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "CourseCreateForm.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
//---------------------------------------------------------------------------
__fastcall TCourseCreate::TCourseCreate(TComponent* Owner,TTableForm *pp)
	: TForm(Owner)
{
	this->pp=pp;
	this->widthPlus=11;
	this->heightPlus=33;
}
//---------------------------------------------------------------------------
void __fastcall TCourseCreate::FormShow(TObject *Sender)
{
	this->Panel1->Visible=false;
	this->Panel2->Visible=false;
	this->Panel3->Visible=false;
	this->Panel4->Visible=false;
	this->Panel5->Visible=false;
	if(isPlan==isReal){
		this->Panel1->SetBounds(0,0,Panel1->Width,Panel1->Height);
		this->Panel1->Visible=true;
		this->Width=Panel1->Width+widthPlus;
		this->Height=Panel1->Height+heightPlus;
	}else if(prog==NULL){
		showPrograms();
	}else if(smena==NULL){
		showSmena();
	}else if(room==NULL){
		showRooms();
	}else if(studentsC<0){
		showStudents();
	}else{
        ModalResult = mrOk;
	}
}
//---------------------------------------------------------------------------
bool sortP (KAEntity* ii,KAEntity* jj) {
	Program *i=dynamic_cast<Program*>(ii);
	Program *j=dynamic_cast<Program*>(jj);
	if(i->istraining!=j->istraining){
		return i->istraining>j->istraining;
	}else if(i->key!=j->key){
		return i->key<j->key;
	}else if(i->name!=j->name){
		return i->name<j->name;
	}
}
bool sortT (std::pair<TDateTime,TDateTime> * ii,std::pair<TDateTime,TDateTime> * jj) {
	return ii->first<jj->first;
}
bool sortR (KAEntity* ii,KAEntity* jj) {
	ClassRoom *i=dynamic_cast<ClassRoom *>(ii);
	ClassRoom *j=dynamic_cast<ClassRoom *>(jj);
	return i->name<j->name;
}
bool TCourseCreate::checkRoom(KAEntity* r){
	ClassRoom *room=(ClassRoom*)r;
	if(prog==NULL)return true;
	else{
		if(prog->specifics.size()>room->specifics.size())return false;
		else{
			for(int i=0;i<prog->specifics.size();++i){
				if(std::find(room->specifics.begin(),room->specifics.end(),prog->specifics[i])==room->specifics.end())
					return false;
			}
        }
	}
	return true;
}
bool TCourseCreate::checkProgram(KAEntity *p){
	Program *pr=(Program*)p;
	if(pr->isactual==false)return false;
	if(room==NULL)return true;
	else{
		if(pr->specifics.size()>room->specifics.size())return false;
		else{
			for(int i=0;i<pr->specifics.size();++i){
				if(std::find(room->specifics.begin(),room->specifics.end(),pr->specifics[i])==room->specifics.end())
					return false;
			}
		}
	}
	return true;
}
void TCourseCreate::showPrograms(){
	this->Panel2->SetBounds(0,0,Panel2->Width,Panel2->Height);
	this->Panel2->Align=alClient;
	this->Width=Panel2->Width+widthPlus;
	this->Height=Panel2->Height+heightPlus;
	ListBox1->Clear();
	Programs *prg=App::db->getPrograms();
	std::sort(prg->begin(),prg->end(),sortP);
	for(int i=0;i<prg->size();++i){
		if(checkProgram(prg->at(i))){
			Program *p=(Program*)prg->at(i);
			ListBox1->AddItem(p->key+" "+p->name,(TObject*)p);
		}
	}
	this->Panel2->Visible=true;
	this->ListBox1->Repaint();
	this->resizeProg();
	this->ListBox1->Repaint();
}
void TCourseCreate::showSmena(){
	this->Panel4->SetBounds(0,0,Panel4->Width,Panel4->Height);
	Panel4->Align=alClient;
	this->Width=Panel4->Width+widthPlus;
	this->Height=Panel4->Height+heightPlus;
	ListBox3->Clear();
	std::sort(prog->times.begin(),prog->times.end(),sortT);
	for(int i=0;i<prog->times.size();++i){
		ListBox3->AddItem(prog->times[i]->first.FormatString("hh:nn")+"-"+prog->times[i]->second.FormatString("hh:nn"),(TObject*)prog->times[i]);
	}
	this->Panel4->Visible=true;
}
void TCourseCreate::showRooms(){
	this->Panel3->SetBounds(0,0,Panel3->Width,Panel3->Height);
	Panel3->Align=alClient;
	this->Width=Panel3->Width+widthPlus;
	this->Height=Panel3->Height+heightPlus;
	ListBox2->Clear();
	Rooms *prg=App::db->getRooms();
	std::sort(prg->begin(),prg->end(),sortR);
	for(int i=0;i<prg->size();++i){
		if(checkRoom(prg->at(i))){
			ClassRoom *p=(ClassRoom*)prg->at(i);
			ListBox2->AddItem(p->name,(TObject*)p);
		}
	}
	this->Panel3->Visible=true;
}
void TCourseCreate::showStudents(){
	this->Panel5->SetBounds(0,0,Panel5->Width,Panel5->Height);
	Panel5->Align=alClient;
	this->Width=Panel5->Width+widthPlus;
	this->Height=Panel5->Height+heightPlus;
	this->Edit1->Text="";
	this->Label5->Caption="max="+IntToStr(this->room->capacity);
	this->Panel5->Visible=true;
	this->Edit1->SetFocus();
}
void __fastcall TCourseCreate::Button1Click(TObject *Sender)
{
	if(Sender==Button1){
		isPlan=true;
		isReal=false;
	}else{
		isPlan=false;
		isReal=true;
	}
	this->Panel1->Visible=false;
	Panel1->Align=alClient;
	if(prog==NULL){
		showPrograms();
	}else if(smena==NULL){
		showSmena();
	}else if(room==NULL){
		showRooms();
	}else if(studentsC<0){
		showStudents();
	}else{
        ModalResult = mrOk;
    }

}
//---------------------------------------------------------------------------



void __fastcall TCourseCreate::ListBox1DblClick(TObject *Sender)
{
	Panel2->Visible=false;
	for(int i=0;i<ListBox1->Count;++i){
		if(ListBox1->Selected[i]){
			prog=reinterpret_cast<Program*>(ListBox1->Items->Objects[i]);
			break;
		}
	}
	if(smena==NULL){
		showSmena();
	}else if(room==NULL){
		showRooms();
	}else if(studentsC<0){
		showStudents();
	}else{
		ModalResult = mrOk;
	}
}
//---------------------------------------------------------------------------

void __fastcall TCourseCreate::ListBox3DblClick(TObject *Sender)
{
	Panel4->Visible=false;
	for(int i=0;i<ListBox3->Count;++i){
		if(ListBox3->Selected[i]){
			smena=reinterpret_cast<std::pair<TDateTime,TDateTime> *>(ListBox3->Items->Objects[i]);
			break;
		}
	}
	if(room==NULL){
		showRooms();
	}else if(studentsC<0){
		showStudents();
	}else{
		ModalResult = mrOk;
	}
}
//---------------------------------------------------------------------------

void __fastcall TCourseCreate::ListBox2DblClick(TObject *Sender)
{
	Panel3->Visible=false;
	for(int i=0;i<ListBox2->Count;++i){
		if(ListBox2->Selected[i]){
			room=reinterpret_cast<ClassRoom*>(ListBox2->Items->Objects[i]);
			break;
		}
	}
	if(studentsC<0){
		showStudents();
	}else{
		ModalResult = mrOk;
	}
}
//---------------------------------------------------------------------------


void __fastcall TCourseCreate::Button3Click(TObject *Sender)
{
	Panel5->Visible=false;
	this->studentsC=StrToInt(Edit1->Text);
	ModalResult = mrOk;
}
//---------------------------------------------------------------------------



void __fastcall TCourseCreate::Edit1KeyDown(TObject *Sender, WORD &Key, TShiftState Shift)

{
	if(Key==13){
		Key=0;
		this->Button3Click(Button3);
	}
}
//---------------------------------------------------------------------------

void TCourseCreate::resizeProg(){
	int j=3;
	for(int i=0;i<ListBox1->Items->Count;++i){
		int h= 0;
		ListBox1MeasureItem(ListBox1, i, h);
		ListBox1->Perform(LB_SETITEMHEIGHT, i, h);
	}
}

void __fastcall TCourseCreate::ListBox1DrawItem(TWinControl *Control, int Index, TRect &Rect,
          TOwnerDrawState State)
{
	int y=3;
	tagRECT tr;
	tr.left=Rect.Left+1;tr.right=Rect.Right;tr.top=Rect.Top+1;tr.bottom=Rect.Bottom;
	Canvas->FillRect(Rect);
	String tt=ListBox1->Items->operator [](Index);
	DrawText(ListBox1->Canvas->Handle, tt.w_str(), tt.Length(), &tr,DT_LEFT|DT_WORDBREAK);

	ListBox1->Canvas->Pen->Color=RGB(230,230,230);
	ListBox1->Canvas->MoveTo(Rect.left,Rect.bottom);
	ListBox1->Canvas->LineTo(Rect.right,Rect.bottom);
}
//---------------------------------------------------------------------------

void __fastcall TCourseCreate::ListBox1MeasureItem(TWinControl *Control, int Index,
		  int &Height)
{
	int g=4;
	tagRECT tr;
	tr.left=0;tr.right=ListBox1->Width;tr.top=0;tr.bottom=0;
	DrawText(ListBox1->Canvas->Handle, ListBox1->Items->operator [](Index).w_str(), ListBox1->Items->operator [](Index).Length(), &tr,DT_CALCRECT|DT_WORDBREAK);
	Height=tr.bottom+4;
}
//---------------------------------------------------------------------------

void __fastcall TCourseCreate::FormResize(TObject *Sender)
{
	Panel1->Repaint();
	this->resizeProg();
	this->ListBox1->Repaint();
	Panel3->Repaint();
	Panel4->Repaint();
	Panel5->Repaint();
}
//---------------------------------------------------------------------------


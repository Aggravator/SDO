//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "ProgramsForm.h"
#include <System.DateUtils.hpp>
//---------------------------------------------------------------------------
//#pragma package(smart_init)
#pragma resource "*.dfm"
#include "fstream"
//---------------------------------------------------------------------------
__fastcall TProgramsForm::TProgramsForm(TComponent* Owner)
	: TComplexEntitiesForm(Owner)
{
	this->modalForm=reinterpret_cast<TModalEntityForm **>(&App::ModalForms::programModal);
	this->OnShow=onShow;
	this->Button5->OnClick=this->onOkButton;
	this->images=this->ImageList1;
	panel=new ProgramRows(this);
	panel->Align=alTop;
	panel->Parent=this->ScrollBox1;
	panel->Height=0;
	panel->BevelOuter=bvNone;
	panel->Padding->Left=2;
	panel->Padding->Right=2;
	panel->Padding->Top=2;
	panel->Padding->Bottom=2;
	std::vector<SDODBImage::EntityTypeEvent> events;
	SDODBImage::EntityTypeEvent ete;ete.entType=SDODBImage::EntityType::EProgram;ete.eventType=SDODBImage::EventType::Delete;
	events.push_back(ete);
	ete.entType=SDODBImage::EntityType::EProgram;ete.eventType=SDODBImage::EventType::Create;
	events.push_back(ete);
	ete.entType=SDODBImage::EntityType::EProgram;ete.eventType=SDODBImage::EventType::Update;
	events.push_back(ete);
	App::db->attachHandler(this,events);
}
__fastcall TProgramsForm::~TProgramsForm(){
	App::db->detachHandler(this);
}
//---------------------------------------------------------------------------

ProgramRow::ProgramRow(ARowsPanel *parent, int size):AEntityRow(parent,size){
	tempEntity=new Program("","",0,true,true,1,0,16777215,0,0,0,0);
	name=new TEdit((HWND)0);
	name->Font->Size=12;
	name->Align=alClient;
	key=new TEdit((HWND)0);
	key->Font->Size=12;
	key->Align=alClient;
	isActive=new TCheckBox((HWND)0);
	isActive->Width=20;
	isProgram=new TCheckBox((HWND)0);
	isProgram->Width=20;

	controls[1]=isActive;
	controls[2]=name;
	controls[3]=key;
	controls[4]=isProgram;
	this->deleteMessage="Внимание!\nУдаление программы приведет к удалению всех групп, которые занимались по данной программе!\n";
}
void ProgramRow::writeToRow(KAEntity* entity){
	Program *pr=dynamic_cast<Program*>(entity);
	name->Text=pr->name;
	isActive->Checked=pr->isactual;
	isProgram->Checked=pr->istraining;
	key->Text=pr->key;
}
void ProgramRow::writeToEntity(KAEntity* entity){
	Program *pr=dynamic_cast<Program*>(entity);
	pr->name=name->Text;
	pr->isactual=isActive->Checked;
	pr->istraining=isProgram->Checked;
	pr->key=key->Text;
}
ProgramRow::~ProgramRow(){
	delete name;
	delete key;
	delete isActive;
	delete isProgram;
}

__fastcall ProgramRows::ProgramRows(TComponent *Owner):RRowsPanel<ProgramRow,6>(Owner){
	entTable=App::db->getPrograms();
	this->ColumnCollection->Clear();
	this->RowCollection->Clear();
	this->ColumnCollection->BeginUpdate();
	TColumnItem *ci=this->ColumnCollection->Add();
	ci->SizeStyle=ssAbsolute;
	ci->Value=35;
	ci=this->ColumnCollection->Add();
	ci->SizeStyle=ssAbsolute;
	ci->Value=50;
	ci=this->ColumnCollection->Add();
	ci->SizeStyle=ssPercent;
	ci->Value=100;
	ci=this->ColumnCollection->Add();
	ci->SizeStyle=ssAbsolute;
	ci->Value=75;
	ci=this->ColumnCollection->Add();
	ci->SizeStyle=ssAbsolute;
	ci->Value=50;
	ci=this->ColumnCollection->Add();
	ci->SizeStyle=ssAbsolute;
	ci->Value=35;
	this->ColumnCollection->EndUpdate();
}
__fastcall ProgramRows::~ProgramRows(){
}
//---------------------------------------------------------------------------

void __fastcall TProgramsForm::Button2Click(TObject *Sender)
{
	Program *pr=new Program("","",0,true,true,1,0,16777215,0,0,0,0);
	App::ModalForms::initForm(modalForm);
	int hy=modalForm[0]->ShowModal();
	if(hy==mrOk){
		*pr=*modalForm[0]->getEntity();
		panel->addRow(pr);
	}
}
//---------------------------------------------------------------------------
void strToTimePair(char *str,std::vector<std::pair<TDateTime,TDateTime>*> &times){

	if(strlen(str)>7){
		char *sp=std::find(str,str+strlen(str),'-');
		*sp='\0';
		++sp;
		times.push_back(new std::pair<TDateTime,TDateTime>(StrToTime(String(str)),StrToTime(String(sp))));
	}
}
void __fastcall TProgramsForm::Button1Click(TObject *Sender)
{
	int g=3;
	if(OpenDialog1->Execute(NULL)){
		String pkey,pname;
		AnsiString temp;
		bool isTraining;
		int dayCount,hourCount,plan;
		std::vector<Program*> progs;
		char buff[200];
		std::vector<std::pair<TDateTime,TDateTime>*> times;
		String name=OpenDialog1->FileName;
		int tpos=name.LastDelimiter(".");
		String format=name.SubString(tpos+1,name.Length()-tpos);
		if(format=="csv"){
			std::ifstream csvF;
			csvF.open(AnsiString(name).c_str(),ios::in);
			if(csvF.is_open()){
				csvF.getline(buff,200,'\n');
				while(!csvF.eof()){
					csvF.getline(buff,200,';');
					isTraining=atoi(buff);
					csvF.getline(buff,200,';');
					pkey=buff;
					csvF.getline(buff,200,';');
					pname=buff;
					csvF.getline(buff,200,';');
					dayCount=atoi(buff);
					csvF.getline(buff,200,';');
					hourCount=atoi(buff);
					csvF.getline(buff,200,';');
					plan=atoi(buff);
					{
						csvF.getline(buff,200,L';');
						strToTimePair(buff,times);
					}
					{
						csvF.getline(buff,200,L';');
						strToTimePair(buff,times);
					}
					{
						csvF.getline(buff,200,L';');
						strToTimePair(buff,times);
					}
					{
						csvF.getline(buff,200,L';');
						strToTimePair(buff,times);
					}
					if(pkey!="" && pname!="" && dayCount!=0 && hourCount!=0){
						std::vector<std::pair<int,int>*> planV;
						if(plan!=0)
							planV.push_back(new std::pair<int,int>(YearOf(TDate::CurrentDate()),plan));
						progs.push_back(new Program(pname,pkey,0,isTraining,true,dayCount,hourCount,16777215,0,&planV,0,&times));
						for(int i=0;i<planV.size();++i)delete planV[i];
					}
					for(int i=0;i<times.size();++i)delete times[i];
					times.clear();
				}
				csvF.close();
			}
		}else if(format=="xls" || format=="xlsx"){
			Variant EApp, EBook, ESheet;
			EApp = CreateOleObject("Excel.Application");
			//EApp.OlePropertySet("Visible",true);
			EBook=EApp.OlePropertyGet("Workbooks").OleFunction(L"Open",WideString(name),0,true);
			ESheet=EBook.OlePropertyGet("ActiveSheet");
			for(int i=2;true;++i){
				isTraining=ESheet.OlePropertyGet("Cells").OlePropertyGet("Item",i,1).OlePropertyGet("Value");
				pkey=ESheet.OlePropertyGet("Cells").OlePropertyGet("Item",i,2).OlePropertyGet("Value");
				pname=ESheet.OlePropertyGet("Cells").OlePropertyGet("Item",i,3).OlePropertyGet("Value");
				dayCount=ESheet.OlePropertyGet("Cells").OlePropertyGet("Item",i,4).OlePropertyGet("Value");
				hourCount=ESheet.OlePropertyGet("Cells").OlePropertyGet("Item",i,5).OlePropertyGet("Value");
				plan=ESheet.OlePropertyGet("Cells").OlePropertyGet("Item",i,6).OlePropertyGet("Value");
				{
					temp=ESheet.OlePropertyGet("Cells").OlePropertyGet("Item",i,7).OlePropertyGet("Value");
					strcpy(buff,temp.c_str());
					strToTimePair(buff,times);
				}
				{
					temp=ESheet.OlePropertyGet("Cells").OlePropertyGet("Item",i,8).OlePropertyGet("Value");
					strcpy(buff,temp.c_str());
					strToTimePair(buff,times);
				}
				{
					temp=ESheet.OlePropertyGet("Cells").OlePropertyGet("Item",i,9).OlePropertyGet("Value");
					strcpy(buff,temp.c_str());
					strToTimePair(buff,times);
				}
				{
					temp=ESheet.OlePropertyGet("Cells").OlePropertyGet("Item",i,10).OlePropertyGet("Value");
					strcpy(buff,temp.c_str());
					strToTimePair(buff,times);
				}
				//TDate
				if(pkey!="" || pname!="" || dayCount!=0 || hourCount!=0){
					std::vector<std::pair<int,int>*> planV;
					if(plan!=0)
						planV.push_back(new std::pair<int,int>(YearOf(TDate::CurrentDate()),plan));
					progs.push_back(new Program(pname,pkey,0,isTraining,true,dayCount,hourCount,16777215,0,&planV,0,&times));
					for(int i=0;i<planV.size();++i)delete planV[i];
					for(int i=0;i<times.size();++i)delete times[i];
					times.clear();
				}else{
					for(int i=0;i<times.size();++i)delete times[i];
					times.clear();
					break;
				}
			}
			EApp.OleProcedure("Quit");
		}
		if(progs.size()>0){
			std::vector<AEntityRow*> &rows=this->panel->rows;
			std::sort(progs.begin(),progs.end(),App::db->getPrograms()->sortFuncU);
			Programs *prgs=App::db->getPrograms();
			int j,ij,iijj;
			for(int i=0;i<progs.size();++i){
				Program *tProg=progs[i],*cProg=NULL;
				for(j=0;j<rows.size();++j){
					cProg=dynamic_cast<Program*>(rows[j]->tempEntity);
					if(cProg->key==tProg->key && cProg->name==tProg->name){
						cProg->days=tProg->days;
						cProg->hours=tProg->hours;
						if(tProg->plan.size()>0){
							int syear=tProg->plan.at(0)->first;
							for(ij=0;ij<cProg->plan.size();++ij){
								if(cProg->plan[ij]->first==syear){
									cProg->plan[ij]->second=tProg->plan.at(0)->second;
									break;
								}
							}
							if(ij==plan.size())
								cProg->plan.push_back(new std::pair(syear,tProg->at(0)->second));
						}
						if(tProg->times.size()>0){
							unsigned short shour1,smin1,ehour1,emin1,shour2,smin2,ehour2,emin2;
							for(ij=0;ij<tProg->times;++ij){
								tProg->times[ij]->first.DecodeTime(&shour1,&smin1,0,0);
								tProg->times[ij]->second.DecodeTime(&ehour1,&emin1,0,0);
								for(iijj=0;iijj<cProg->times.size();++iijj){
									cProg->times[ij]->first.DecodeTime(&shour2,&smin2,0,0);
									cProg->times[ij]->second.DecodeTime(&ehour2,&emin2,0,0);
									if(shour1==shour2 && smin1==smin2 && ehour1==ehour1 && emin1==emin2)break;
								}
								if(iijj==cProg->times.size())
									cProg->times.push_back(new std::pair<TDateTime,TDateTime>(*tProg->times[ij]));
							}
                        }
					}
				}
				if(j==rows.size()){
					this->panel->addRow()
                }
            }
        }
	}
}
//---------------------------------------------------------------------------


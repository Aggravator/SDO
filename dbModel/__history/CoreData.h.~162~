//---------------------------------------------------------------------------

#ifndef CoreDataH
#define CoreDataH
#include <Data.Win.ADODB.hpp>
#include <vector>
#include <algorithm>

class KAEntityTable;
class SDODBImage;
class Specifics;
class Program;
class KAEntity{
public:
	bool deleteEntity();
	bool updateEntity(KAEntity *entity);
	virtual bool validate()const =0;
	virtual bool isDifferent(KAEntity *entity)const =0;
protected:
	virtual bool updateQueryBuilder(String &query,KAEntity *entity)=0;
	KAEntityTable *parent;
	friend class KAEntityTable;
};
class KAEntityTable:public std::vector<KAEntity*>{
public:
	virtual bool deleteEntities(std::vector<KAEntity*> &entities);
	virtual bool createEntity(KAEntity *entity);
	virtual bool createEntities(std::vector<KAEntity*> &entities)=0;
	SDODBImage * parent;
protected:
	virtual bool deleteQueryBuilder(String& query,std::vector<KAEntity*> &entities)=0;
	virtual bool createQueryBuilder(String &query,std::vector<KAEntity*> &entities)=0;
	bool isHas(KAEntity* entity);
	friend class KAEntity;
};

class Specific:public KAEntity{
public:
	Specific(String name);
	bool validate()const;
	bool isDifferent(KAEntity *entity)const;
protected:
	int id;
	String name;
	bool updateQueryBuilder(String &query,KAEntity *entity);
	friend class Specifics;
};

class Specifics:public KAEntityTable{
public:
	Specifics(SDODBImage *parent);
	bool createEntities(std::vector<KAEntity*> &entities);
protected:
	bool deleteQueryBuilder(String& query,std::vector<KAEntity*> &entities);
	bool createQueryBuilder(String &query,std::vector<KAEntity*> &entities);
};

class ClassRoom{
public:
	ClassRoom(int id,String name,int capacity,bool isrent,std::vector<Specific*> &specifics);
	bool validate()const;
	bool isDifferent(KAEntity *entity)const;
protected:
	bool updateQueryBuilder(String &query,KAEntity *entity);
	int id;
	String name;
	int capacity;
	bool isrent;
	std::vector<Specific*> specifics;
	friend class Rooms;
};
class Rooms:public KAEntityTable{
public:
	bool createRoom(String* name,int capacity,bool isrent,std::vector<Specific*> &specifics);
	bool deleteRooms(std::vector<ClassRoom*>& rooms);
	bool update();
private:

};
class Group{
public:
	bool update();
	bool deleteGroup();
private:
	String id;
	String name;
	std::vector<std::pair<int,int>*> plan;
};
class Groups:public std::vector<Group*>{
public:
	bool createGroup(const String* name,std::vector<std::pair<int,int>*>& plan);
private:
};
class Program{
public:
	bool deleteProgram();
	bool update();
	Program(SDODBImage *dbImage);
private:
	int id;
	String name,key;
	int capacity;
	bool istraining,isactual;
	std::vector<Specific*> specifics;
	std::vector<std::pair<int,int>*> plan;
	std::vector<Group*> groups;
};
class  Programs:public std::vector<Program*>{
public:
	bool createProgram(const String* name,const String* key,int capacity,bool istraining,bool isactual,std::vector<Specific*> &specifics,std::vector<Group*> &groups);
	bool deletePrograms(std::vector<Program*>& programs);
private:
};

class Course{
public:
    bool deleteCourse();
private:
	int id;
	Program* program;
	TDateTime start;
	TDateTime end;
	String desc;
	std::vector<TDateTime*> dates;
};

class PlanTable:public std::vector<Course*>{
public:
	bool createCourse(int id,Program* program,TDateTime start,TDateTime end,String desc,std::vector<TDateTime*> &dates);
private:
};
class RealTable:public std::vector<Course*>{
public:
	bool createCourse(int id,Program* program,TDateTime start,TDateTime end,String desc,std::vector<TDateTime*> &dates);
private:
};
class SDODBImage{
public:
	SDODBImage(TADOConnection *connection);
	int getUID();
private:
	int uid;
	Programs *programs;
	Groups *groups;
	Rooms *rooms;
	Specifics *specifics;
	TADOConnection *connection;
	friend class KAEntity;
	friend class KAEntityTable;
	friend class Specifics;
	friend class Rooms;
	friend class Groups;
	friend class Programs;
};

#endif
